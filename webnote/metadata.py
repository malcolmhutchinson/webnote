"""Classes implimenting the simple filesystem syntax.
"""

import os
import settings

class Metadata():
    """Provide services for dealing with metadata.

    This class knows all about the metadata files. Give it the
    pathname to a file and it will determine where the metafile is,
    read it and return a list of key/value pairs.

    It can also create a metafile for a new page, and guess the
    contents of certain fields, like title, author, etc.

    A metadata record looks like this:

        # Dublin Core metadata record
        DC.Title:       Webnote
        DC.Creator:     Malcolm Hutchinson
        DC.Subject:     Filesystem syntax, information systems, Django, Python
        DC.Description: Filesystem services implimenting the simple syntax.
        DC.Contributor:
        DC.Coverage:    New Zealand
        DC.Date:        2015-04-03
        DC.Type:
        DC.Format:      text/html
        DC.Source:
        DC.Language:    en
        DC.Identifier:
        DC.Publisher:   Malcolm Hutchinson
        DC.Relation:
        DC.Rights:      cc-by
        # END DC metadata

        # Page command options
        sort-reverse:   false # true
        deny:           all
        allow:          staff
        status:         draft
        # END page command

    This class takes a page address, which is the address generated by
    a Webnote object, pointing to a page (text or HTML file).

    This class can read a file containing a record like this, and
    parse it into a metadata structure.

    The metadata file is represented by a list stored at
    self.metarecord, containing (key, value) tuples. These are
    obtained by splitting each line at the colon, and returning the
    first element as key, and a re-stitched list of the rest as value.

    A metarecord structure looks like this:

    [
        ('comment', ' Dublin Core metadata record\n')
        ('DC.title', 'Webnote test data collection')
        ('DC.creator', 'Hutchinson, M. G.')
        ('DC.creator', 'Whyte, S. K.')
        ('DC.subject', 'Simple syntax, test data')
        ('DC.description', 'Index page to the test data set')
        ('DC.contributor', '')
        ('DC.coverage', 'Hamilton, New Zealand')
        ('DC.date', '2015-11-29')
        ('DC.type', 'Test data')
        ('DC.format', 'text/html')
        ('DC.source', '')
        ('DC.language', 'en')
        ('DC.identifier', '')
        ('DC.publisher', 'archaeography.co.nz')
        ('DC.publisher', 'Malcolm Hutchinson')
        ('DC.relation', '')
        ('DC.rights', 'cc-by')
        ('comment', ' END DC metadata\n')
    ]


    """

    DC_METADATA = {
        "dc.title": [],
        "dc.creator": [],
        "dc.subject": [],
        "dc.description": [],
        "dc.contributor": [],
        "dc.coverage": [],
        "dc.date": [],
        "dc.type": [],
        "dc.format": [],
        "dc.source": [],
        "dc.language": ['en',],
        "dc.relation": [],
        "dc.identifier": [],
        "dc.rights": [],
        "dc.publisher": [],
    }

    META_COMMANDS = {
        'status': [],
        'sort-reverse': [],
        'deny': [],
        'allow': [],
        'embargo': [],
    }

    warnings = []

    pagefile = None
    metafilename = None
    metarecord = None
    metastructure = None
    metadata = None
    commands = None

    def __init__(self, pagefile):
        """Operations on metadata records.

        Initialise with a file pathname.
        """

        self.metarecord = None
        self.pagefile = pagefile
        self.metafilename = self.locate_metafile()

        if self.metafilename:
            self.metarecord = self.read_metafile()

        if not self.metarecord:
            self.metarecord = self.construct_metarecord()
    
        (self.metadata, self.commands) = self.process_metarecord()  

        
    def construct_metafile(self, metarecord=None):
        """Return a string containing a metadata record in text format.

        A metafile is a string representation of a metarecord.

        This produces a string containing a record suitable for fileing
        with pages in the document archive. It is intended to be
        written to a text file with a .meta suffix.

        If the metadata structure is empty, as at init, the result
        will be a file record with a list of keys, but no values.

        """

        if not metarecord:
            metarecord = self.metarecord
        
        for line in metarecord:
            print line

        metafile = ''
        return metafile
        
    def construct_metarecord(self):
        """Return a metarecord object from filespace data.

        A metarecord is a list of (key, value) tuples.
        """
        
        metarecord = [
            ('comment', 'Dublin core metadata record'),
        ]

        for line in self.DC_METADATA.keys():
            metarecord.append((line, ''))

        metarecord.append(
            (('comment', 'Dublin core metadata record')),
        )

        return metarecord
        
    def dublincore(self):
        """Return a list of DC metadata attribute names and values.

        List of (key, value) tuples taken from the metafile, with
        order and duplicated elements preserved.

        """

        dc = []

        for item in self.metarecord:
            if item[0][:3].upper() == 'DC.':
                dc.append(item)
                
        return dc
                          
    def save(self, data):

        """Replace the contents of the meta file with items data.
        """

        self.construct_metafile()

        return True

    def update_metadata(self, data):
        """Replace values in the metadata structure with supplied dictionary.

        This is often used with POST data.
        """

        return True

    def locate_metafile(self):
        """Locate the metafile for the given address.

        This follows this process:

        -   metafile in the parent directory.
        -   metafile in the meta directory.
        -   metafile in the paired directory.

        Return None if no file found.
        """

        (basename, ext) = os.path.splitext(self.pagefile)

        filename = basename + '.meta'

        if os.path.isfile(filename):
            return filename

        steps = basename.split('/')
        last = steps.pop()
        path = '/'.join(steps)
        metaname = last + '.meta'

        filename = os.path.join(path, 'meta', last + '.meta')

        if os.path.isfile(filename):
            return filename

        filename = os.path.join(basename, metaname)
        if os.path.isfile(filename):
            return filename

        return None

    def read_metafile(self):
        """Return a metadata structure from the metafile filename.

        Open and read the file, parse the contents into a metadata structure.
        """

        record = [('filename', self.metafilename)]

        with open(self.metafilename) as f:
            contents = f.readlines()

        for line in contents:
            if line[0] == '#':
                key = 'comment'
                value = line[1:]
                record.append((key, value))
            else:
                bits = line.split(":")
                key = bits.pop(0)
                key = key.strip()
                value = ':'.join(bits)
                value = value.strip()
                record.append((key, value))

        return record

    def process_metarecord(self):
        """Turn a file record thing into a memory structure we can work with.

        """

        metadata = {}
        commands = self.META_COMMANDS

        for element in settings.DC_ELEMENTS:
            metadata[element.lower()] = []

        for line in self.metarecord:

            if line[0].lower() in metadata.keys():
                metadata[line[0].lower()].append(line[1])

            elif line[0] in commands:
                commands[line[0]] = line[1]

        return (metadata, commands)

    def title(self):
        return '\n'. join(self.metadata['dc.title'])

    def author(self):
        return '; '.join(self.metadata['dc.creator'])

    def pubdate(self):
        if len(self.metadata['dc.date']) > 0:
            return self.metadata['dc.date'][0]
        else:
            return ""

    def subject(self):
        return ', '.join(self.metadata['dc.subject'])

    def description(self):

        desc = """This fake description is declared in the
        webnote. Metadata._description() method."""

        return '\n'.join(self.metadata['dc.description'])

    def contributors(self):
        return '; '.join(self.metadata['dc.contibutor'])

    def location(self):
        return ', '.join(self.metadata['dc.coverage'])

    def rights(self):
        rights = None
        right = '; '.join(self.metadata['dc.rights'])
        if right in settings.LICENSES.keys():
            rights = "<a href='" + settings.LICENSES[right][0] + "'>"
            rights += settings.LICENSES[right][1] + "</a>"

        return rights
        
    def source(self):
        return '; '.join(self.metadata['dc.source'])

    def publisher(self):
        return '; '.join(self.metadata['dc.publisher'])

